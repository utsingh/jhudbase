
<head><title>PHP PreparedStatement example</title></head>
<body>

<?php

include 'open.php';

//Override the PHP configuration file to display all errors
//This is useful during development but generally disabled before release
ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);

//Define a PHP helper function to create a table, given a result set
//with the four columns itemID, sellerNum, category, startPrice
function displayItems($res) {

      if ($res->num_rows == 0) {

         //Result contains no rows at all
         echo "No items found meeting specified criteria";

      } else {
     
         //Create table to display results
         echo "<table border=\"1px solid black\">";
         echo "<tr><th> itemID </th> <th> sellerNum </th> ";
         echo "<th> category </th> <th> startPrice </th></tr>";

         //Report result set by visiting each row in it and accessing
	 //attribute values by name of attribute rather than position.
	 //The fetch_assoc returns null when no more rows to fetch.
         while (null !== ($row = $res->fetch_assoc())) {
            echo "<tr>";
            echo "<td>".$row['itemID']."</td>";
            echo "<td>".$row['sellerNum']."</td>";
            echo "<td>".$row['category']."</td>";
            echo "<td>".$row['startPrice']."</td>";
            echo "</tr>";
         }

         echo "</table>";
      }
}


//Prepare a statement that we can later execute. The ?'s are placeholders for
//parameters whose values we will set before we run the query
if ($stmt = $conn->prepare(
      "SELECT itemID, sellerNum, category, startPrice ".
      "FROM Item ".
      "WHERE sellerNum = ? AND startPrice <= ? ".
      "ORDER BY startPrice DESC;")) {


   //Attach the ? in prepared statements to variables (even though those variables
   //don't hold the values we want yet).  First parameter is a list of types of
   //the variables that follow: 's' means string, 'i' means integer, 'd' means
   //double. E.g., for a statment with 3 ?'s, where middle parameter is an integer
   //and the other two are strings, the first argument included should be "sis".

   $stmt->bind_param('sd', $seller, $upperLimit);

   echo "<h2>Items Offered By Seller Given Starting Price Upper Limit</h2>";

   //Run query one time looking for seller cxgkk687 and an upperLimit of $200,
   //by first setting the bound variables to the desired values, then calling
   //execute on the prepared statement
   $seller = 'cxgkk687';
   $upperLimit = 200.00;
   
   if ($stmt->execute()) {

      echo "Finding items sold by 'cxgkk687' with starting price <= $200 ... <br>";

      //Store result set generated by the prepared statement
      $result = $stmt->get_result();

      //Call function defined above to create html output
      displayItems($result);
 
      //We are done with the result set returned above, so free it
      //before we try to call prepared statement again
      $result->free_result();
      
   } else {
      echo "First execute failed.<br>";
   }

   //Output some blank space
   echo "<br><br>";



   //Now re-run already-prepared statement looking for different seller
   //but same upperLimit by resetting $seller variable value to sedab269
   //and then calling execute again (no need to reset $upperLimit)
   $seller = 'sedab269';
   if ($stmt->execute()) {

      echo "Finding items sold by 'sedab269' with starting price <= $200 ... <br>";
      
      // Store result set generated by the prepared statement
      $result = $stmt->get_result();

      //Call function defined above to create html output
      displayItems($result);

      //We are done with the result set returned above, so free it
      $result->free_result();

   } else {
     echo "Second execute failed.<br>";
   }

   //Output some blank space
   echo "<br><br>";



   //Now re-run already-prepared statement looking for same seller
   //but different upperLimit 
   $seller = 'sedab269';
   $upperLimit = 5000.00;
   if ($stmt->execute()) {

      echo "Finding items sold by 'sedab269' with starting price <= $5000 ... <br>";

      // Store result set generated by the prepared statement
      $result = $stmt->get_result();

      //Call function defined above to create html output
      displayItems($result);

      //We are done with the result set returned above, so free it
      $result->free_result();

   } else {
     echo "Third execute failed.<br>";
   }

   //Close down the prepared statement
   $stmt->close();

} else {

    //A problem occurred when preparing the statement; check for syntax errors
    //and misspelled attribute names in the statement string.
    $error = $conn->errno . ' ' . $conn->error;
    echo $error; 
}


//Close the connection created in open.php
$conn->close();
?>
</body>
